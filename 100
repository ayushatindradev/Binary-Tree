#include<iostream>
// using namespace std;
// class Node{
// public:
// int data;
// Node *left;
// Node *right;
// Node(int val,Node *left,Node *right){
//     this->data = val;
//     this->left = NULL;
//     this->right = NULL;
// }
// };
// int height(Node *root){
//     if(root==NULL){
//         return 0;
//     }
//     return max(height(root->left),height(root->right))+1;
// }
// int depth(Node *root,Node* target,int d=0){
//     if(root==NULL){
//         return -1;

//     }
//     if(root==target){
//         return d;
//     }
//     int left = depth(root->left,target,d+1);
//     if(left!=-1){
//         return left;
//     }
//     return depth(root->right,target,d+1);

// }
// void preOrder(Node *root){
//     if(root == NULL){
//         return;
//     }
//     cout<<root->data<<" ";
//     preOrder(root->left);
//     preOrder(root->right);
// }
// void inorder(Node *root){
//     if(root==NULL){
//         return;
//     }
//     inorder(root->left);
//     cout<<root->data<<" ";
//     inorder(root->right);
// }
// void postOrder(Node *root){
//     if(root==NULL){
//         return;
//     }
//     postOrder(root->left);
//     postOrder(root->right);
//     cout<<root->data<<" ";
// }
// int main(){
// }

// int main(){
//     // What is a binary tree?
//     // A binary tree is a tree data structur where each node has at most two children
//     // left and right
//     // What is the maximum number of children a node can have in a binary tree?
//     // // A node can have at most two childeren : left and right
//     // What is the root node in a binary tree?
//     // ths root is the topmost node of the tree.
//     // Node* root =new Node(10,NULL,NULL);
//     // Node* node2 = new Node(20,NULL,NULL);
// // What is a leaf node in a binary tree?
// // A lef node is the node with no childeren

// // if(Node->left == NULL &&  Node->right == NULL){
// //     cout<<"Leaf node"<<Node->left<<endl;
// // }
// // What is the height of a binary tree?
// // // The height of the binary tree is the longest path frmo the root to a __tuple_leaf
// // What is the depth of a node in a binary tree?
// // The depth of a node is the distance from root to node

// // How many nodes are there in a binary tree of height 2 (assuming a full binary tree)?
// // a full binary tree has (2^(h+1)-1)
// // h=2 , node = 2^3-1=7;
// // What is the difference between a binary tree and a binary search tree (BST)?
// // A binary tree follow no order rule , but a BST has:
// // left Subtree node<root
// // right subtree >root

// // What are the three types of depth-first traversals in a binary tree?

// //
// // What is the base case for a recursive function that processes a binary tree?
// // the base cases is when the node is NULL.
// // if(root == NULL){
//     // return;
// // }

// // What is a node in a binary tree?
// // A node is the basix unit of the binary tree that contains the data and linkes to its left and right childern..
// // struct Node{
// //     int data;
// //     Node* left;
// //     Node* right;
// // }
// // How do you check if a binary tree is empty?
// if(root == NULL){
//     cout<<"The binary tree is empty";

// }

// }
